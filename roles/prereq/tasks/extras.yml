---
- name: Update apt repo and cache on all Debian/Ubuntu boxes
  apt: update_cache=yes force_apt_get=yes cache_valid_time=3600
  when: ansible_os_family == 'Debian'

- ansible.builtin.set_fact:
    required_packages: "{{ base_packages + extra_packages }}"

- name: Install base packages
  block:
    - name: Install base packages on debian servers
      apt: name={{ item }} state=latest
      when: ansible_os_family == 'Debian'
      with_items: "{{ required_packages }}"

    - name: Install base packages on arch servers
      pacman: name={{ item }} state=latest
      when: ansible_os_family == 'Archlinux'
      with_items: "{{ required_packages }}"

    - name: Install base packages on redhat servers
      yum: name={{ item }} state=latest
      when: ansible_os_family == 'RedHat'
      with_items: "{{ required_packages }}"

- name: Update packages
  block:
    - name: Upgrade all packages on debian servers
      apt: upgrade=yes force_apt_get=yes
      when: ansible_os_family == 'Debian' and os_upgrade

    - name: Upgrade all packages on arch servers
      pacman: update_cache=yes upgrade=yes
      when: ansible_os_family == 'Archlinux' and os_upgrade

    - name: Upgrade all packages on redhat servers
      yum: name=* state=latest
      when: ansible_os_family == 'RedHat' and os_upgrade

- name: Check if a reboot is needed on all servers
  register: reboot_required_file
  stat:
    path: /var/run/reboot-required

- name: Reboot the box if kernel updated
  reboot:
    msg: "Reboot initiated by Ansible for kernel updates"
    connect_timeout: 5
    reboot_timeout: 90
    pre_reboot_delay: 0
    post_reboot_delay: 30
    test_command: uptime
  when: reboot_required_file.stat.exists

# OS config
- name: Modify remote hosts file
  become: true
  lineinfile:
    dest: /etc/hosts
    regexp: ".*{{ item }}$"
    line: "{{ hostvars[item].external_host | default(hostvars[item].ansible_host) }} {{ item }}"
    state: present
  when: hostvars[item].inventory_hostname is defined
  with_items: "{{ groups['k3s_cluster'] }}"

- name: Modify local hosts file
  lineinfile:
    dest: "{{ etc_hosts_file }}"
    regexp: ".* {{ item }}$"
    line: "{{ hostvars[item].external_host | default(hostvars[item].ansible_host) }} {{ item }}"
    create: true
    state: present
  delegate_to: 127.0.0.1
  when: hostvars[item].inventory_hostname is defined
  with_items: "{{ groups['k3s_cluster'] }}"

- name: Set timezone to UTC
  become: true
  community.general.timezone:
    name: "Etc/UTC"

- name: Wipe extra volumes
  become: true
  community.general.filesystem:
    dev: "/dev/{{ item.value.id }}"
    fstype: "{{ item.value.fstype | default('ext4') }}"
  with_items: "{{ extra_volumes | dict2items }}"
  when: "wipe_data"

- name: Ensure extra volumes directory
  file:
    path: "{{ item.value.path }}"
    state: directory
  with_items: "{{ extra_volumes | dict2items }}"

- name: Mount extra volumes
  become: true
  mount:
    path: "{{ item.value.path }}"
    src: "/dev/{{ item.value.id }}"
    fstype: "{{ item.value.fstype | default('ext4') }}"
    state: mounted
  with_items: "{{ extra_volumes | dict2items }}"

- name: Empty required directories
  become: true
  file:
    path: "{{ item }}"
    state: absent
  with_items: "{{ required_directories }}"
  when: "wipe_data"

- name: Create required directories
  become: true
  file:
    path: "{{ item }}"
    state: directory
  with_items: "{{ required_directories }}"

- name: Install NVIDIA packages
  block:
    - name: Install NVIDIA packages on debian servers
      become: true
      ansible.builtin.shell: |
        dpkg -l | grep -qw nvidia-container-toolkit &> /dev/null ||  \
          curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \
          && curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \
            sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \
            tee /etc/apt/sources.list.d/nvidia-container-toolkit.list \
          && apt-get update \
          && apt-get install -y nvidia-container-toolkit
      when: ansible_os_family == 'Debian'
    - name: Install NVIDIA packages on arch servers
      become: true
      ansible.builtin.shell: |
        pacman -Qi nvidia-container-toolkit &> /dev/null || pacman -S nvidia-container-toolkit
      when: ansible_os_family == 'Archlinux'
    - name: Install NVIDIA packages on redhat servers
      become: true
      ansible.builtin.shell: |
        rpm -q nvidia-container-toolkit || curl -s -L https://nvidia.github.io/libnvidia-container/stable/rpm/nvidia-container-toolkit.repo | \
          tee /etc/yum.repos.d/nvidia-container-toolkit.repo \
          && yum install -y nvidia-container-toolkit
      when: ansible_os_family == 'RedHat'

    - name: Generate a CDI specification
      become: true
      ansible.builtin.shell: |
        nvidia-ctk runtime configure --runtime=containerd
        nvidia-ctk cdi generate --output=/etc/cdi/nvidia.yaml
  when: k3s_gpu_nvidia_enabled

- name: Configure NTP service
  block:
    - name: Enable and check NTP service
      ansible.builtin.systemd:
        name: ntpd
        daemon_reload: true
        state: started
        enabled: true
  when: ansible_os_family == 'Debian'
  ignore_errors: true

- name: Ensure Volumes
  block:
    - ansible.builtin.template:
        src: "ensure-volumes.sh.j2"
        dest: "/usr/local/bin/ensure-volumes"
        owner: root
        group: root
        mode: "u=rwx,g=rx,o=rx"
    - ansible.builtin.file:
        path: "/var/log/ensure-volumes/"
        mode: 0755
        state: directory
    - ansible.builtin.cron:
        name: "ensure-volumes"
        minute: "*/5"
        job: "/usr/local/bin/ensure-volumes | multilog t s1048576 n5 '!tai64nlocal' /var/log/ensure-volumes/ 2>&1"
  when: "extra_volumes"

# - fail: