---
helm_force_update: false

ingress_hostname: ""

_ingress_cors_annotations: &ingress_cors_annotations
  nginx.ingress.kubernetes.io/enable-cors: "true"

ingress_nginx_helm_config:
  # custom values from https://github.com/kubernetes/ingress-nginx/blob/main/charts/ingress-nginx/values.yaml
  controller:
    kind: DaemonSet
    port:
      https: 443
    containerPort:
      https: 443
    hostNetwork: true
    service:
      externalTrafficPolicy: "Local"
      enableHttp: false

    ingressClass: nginx
    ingressClassResource:
      name: nginx
      enabled: true
      default: true
      controllerValue: "k8s.io/ingress-nginx"
    watchIngressWithoutClass: true

    allowSnippetAnnotations: true
    config:
      use-forwarded-headers: "true"
      proxy-body-size: 0
    extraArgs:
      default-ssl-certificate: "kube-system/{{ ingress_hostname }}-cert"

    metrics:
      enabled: true
      serviceMonitor:
        enabled: "{{ enable_service_monitors }}"
      prometheusRule:
        enabled: "{{ enable_service_monitors }}"
        rules:
          - alert: NGINXConfigFailed
            expr: count(nginx_ingress_controller_config_last_reload_successful == 0) > 0
            for: 1s
            labels:
              severity: critical
            annotations:
              description: bad ingress config - nginx config test failed
              summary: uninstall the latest ingress changes to allow config reloads to resume
          - alert: NGINXCertificateExpiry
            expr: (avg(nginx_ingress_controller_ssl_expire_time_seconds{host!="_"}) by (host) - time()) < 604800
            for: 1s
            labels:
              severity: critical
            annotations:
              description: ssl certificate(s) will expire in less then a week
              summary: renew expiring certificates to avoid downtime
          - alert: NGINXTooMany500s
            expr: 100 * ( sum( nginx_ingress_controller_requests{status=~"5.+"} ) / sum(nginx_ingress_controller_requests) ) > 5
            for: 1m
            labels:
              severity: warning
            annotations:
              description: Too many 5XXs
              summary: More than 5% of all requests returned 5XX, this requires your attention
          - alert: NGINXTooMany400s
            expr: 100 * ( sum( nginx_ingress_controller_requests{status=~"4.+"} ) / sum(nginx_ingress_controller_requests) ) > 5
            for: 1m
            labels:
              severity: warning
            annotations:
              description: Too many 4XXs
              summary: More than 5% of all requests returned 4XX, this requires your attention

cert_manager_cluster_issuer_spec:
  selfSigned: {}
cert_manager_cluster_issuer_secret_name:
cert_manager_cluster_issuer_secret_data:

external_dns_secret_name:
external_dns_secret_data:
external_dns_helm_values:

kubernetes_reflector_helm_values: {}

kubernetes_reloader_helm_values: {}

security_enabled: false
security_github_client_id:
security_github_client_secret:
security_github_organizations:
security_github_organizations_mapped: |
  {% for org in security_github_organizations.split(',') %}
  - name: "{{ org.split(':')[0] }}"
  {% if ":" in org %}
    teams:
  {% for team in org.split(':')[1].split('|') %}
    - "{{ team }}"
  {% endfor %}
  {% endif %}
  {% endfor %}

security_static_users: ""

security_ip_white_list:
  - 127.0.0.1/32
  - 10.42.0.0/16
  - 10.43.0.0/16
  - 192.168.31.0/24

security_dex_helm_values_default_clients: |
  - id: dex-static-clients
    name: "dex-static-clients"
    public: true
    redirectURIs:
      - 'https://example.com/oidc/callback'
    secret: "{{ security_github_client_secret }}"
  - id: argo-cd
    name: "Argo CD"
    redirectURIs:
      - "https://automation-argo-cd.{{ ingress_hostname }}/api/dex/callback"
    secret: "{{ security_github_client_secret }}"
security_dex_extra_clients: []
security_dex_helm_values: # https://github.com/dexidp/helm-charts/blob/master/charts/dex/values.yaml
  config:
    storage:
      type: kubernetes
      config:
        inCluster: true

    issuer: https://security-dex.{{ ingress_hostname }}/dex
    scopes:
      - email
      - groups
      - offline_access
      - openid
      - profile

    web:
      allowedOrigins:
        - "*"

    staticClients: "{{ (security_dex_helm_values_default_clients | from_yaml) + (security_dex_extra_clients | from_yaml) }}"

    staticPasswords: "{{ security_static_users | from_yaml }}"

    enablePasswordDB: true

    oauth2:
      skipApprovalScreen: true
      passwordConnector: local

    connectors:
      - type: github
        id: github
        name: GitHub
        config:
          clientID: "{{ security_github_client_id }}"
          clientSecret: "{{ security_github_client_secret }}"
          redirectURI: https://security-dex.{{ ingress_hostname }}/dex/callback
          orgs: "{{ security_github_organizations_mapped | from_yaml }}"

  serviceMonitor:
    enabled: "{{ enable_service_monitors }}"

  ingress:
    annotations:
      <<: *ingress_cors_annotations

    enabled: true
    className: nginx
    hosts:
      - host: "security-dex.{{ ingress_hostname }}"
        paths:
          - path: /
            pathType: Prefix

security_oauth2_proxy_helm_values: # https://github.com/oauth2-proxy/manifests/blob/main/helm/oauth2-proxy/values.yaml
  fullnameOverride: oauth2-proxy

  config:
    clientID: oauth2-proxy
    clientSecret: "{{ security_github_client_secret }}"
    cookieSecret: "{{ lookup('community.general.random_string', length=16, special=False) }}"

  extraArgs:
    provider: "oidc"
    provider-display-name: "Github"
    oidc-issuer-url: https://security-dex.{{ ingress_hostname }}/dex
    redirect-url: https://security-oauth2.{{ ingress_hostname }}/oauth2/callback
    skip-provider-button: false
    approval-prompt: auto

    code-challenge-method: S256
    reverse-proxy: true
    show-debug-on-error: true

    cookie-csrf-expire: "1h"
    cookie-domain: ".{{ ingress_hostname }}"
    cookie-expire: "168h"
    cookie-samesite: "lax"
    cookie-secure: true
    whitelist-domain: ".{{ ingress_hostname }}"

    pass-access-token: true
    pass-authorization-header: true
    pass-host-header: true
    pass-user-headers: true
    set-authorization-header: true
    set-xauthrequest: true
    ssl-insecure-skip-verify: true
    ssl-upstream-insecure-skip-verify: true

    skip-jwt-bearer-tokens: true
    oidc-extra-audience: "dex-static-clients"

    display-htpasswd-form: false
  ingress:
    enabled: true
    annotations:
      <<: *ingress_cors_annotations
    className: nginx
    path: /oauth2
    pathType: Prefix
    hosts:
      - "{{ ingress_hostname }}"
      - "*.{{ ingress_hostname }}"
      - "security-oauth2.{{ ingress_hostname }}"

security_oauth2_annotations: &security_oauth2_annotations
  <<: *ingress_cors_annotations
  nginx.ingress.kubernetes.io/auth-signin: https://security-oauth2.{{ ingress_hostname }}/oauth2/start?rd=https://$host$escaped_request_uri
  nginx.ingress.kubernetes.io/auth-url: https://security-oauth2.{{ ingress_hostname }}/oauth2/auth
  nginx.ingress.kubernetes.io/auth-response-headers: X-Auth-Request-User, X-Auth-Request-Email, X-Auth-Request-Access-Token, Set-Cookie, Authorization
  nginx.ingress.kubernetes.io/auth-snippet: |
    if ( $request_uri ~* "^SOME_REGEX_TO_SKIP" ) {
        return 200;
    }

    # set $auth_header $http_authorization;

    # if ( $request_uri ~* ^/auth-bearer/([^/]+)/(.*)$ ) {
    #   set $auth $1;
    #   set $auth_header "Bearer ${auth}";
    # }

    # proxy_set_header Authorization $auth_header;
  nginx.ingress.kubernetes.io/configuration-snippet: |
    auth_request_set $name_upstream_1 $upstream_cookie__oauth2_proxy;

    # rewrite ^(/auth-basic/[^/]+)/(.*)$ /$2 break;


    access_by_lua_block {
      if ngx.var.name_upstream_1 ~= "" then
        ngx.header["Set-Cookie"] = "_oauth2_proxy=" .. ngx.var.name_upstream_1 .. ngx.var.auth_cookie:match("(; .*)")
      end
    }

longhorn_enabled: false
longhorn_enabled_only_agent: false
longhorn_replica_count: 2
longhorn_data_dir: /var/lib/longhorn/
longhorn_helm_values:
  global:
    nodeSelector:
      "longhorn.io/enabled": "true"

    tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
  defaultSettings:
    defaultDataPath: "{{ longhorn_data_dir }}"
  persistence:
    defaultClassReplicaCount: "{{ longhorn_replica_count }}"
    defaultNodeSelector:
      enable: "{{ longhorn_enabled_only_agent }}"
      selector: "AGENT_NODE"
  metrics:
    serviceMonitor:
      enabled: "{{ enable_service_monitors }}"
  ingress:
    enabled: true
    ingressClassName: "nginx"
    host: "system-longhorn.{{ ingress_hostname }}"
    path: /
    pathType: Prefix
    tls: false
    secureBackends: false
    annotations:
      <<: *security_oauth2_annotations

      gethomepage.dev/enabled: "true"
      gethomepage.dev/name: "Longhorn"
      gethomepage.dev/pod-selector: "app=longhorn-ui"
      gethomepage.dev/description: "Cloud-Native distributed storage built on and for Kubernetes"
      gethomepage.dev/group: "System"
      gethomepage.dev/icon: "sh-rancher-longhorn-light"

snapshot_controller: {}

nfs_external_provisioner_enabled: false
nfs_external_provisioner_path: "/"
nfs_external_provisioner_helm_values:
  storageClass:
    name: nfs
  nfs:
    server: "{{ nfs_external_provisioner_server }}"
    path: "{{ nfs_external_provisioner_path }}"
    mountOptions: ["vers=4"]

sealed_secrets_enabled: false
sealed_secrets_key: ~/.sealed_secrets/sealed-secrets-key.json
sealed_secrets_restore: true

argocd_enabled: false
argocd_namespaces:
  - default
argocd_helm_secrets:
  security.yaml: |
    security_github_client_id: "{{ security_github_client_id }}"
    security_github_client_secret: "{{ security_github_client_secret }}"
    security_github_organizations: "{{ security_github_organizations }}"
# custom values from https://github.com/argoproj/argo-helm/blob/main/charts/argo-cd/values.yaml
argocd_helm_values:
  global:
    domain: "automation-argo-cd.{{ ingress_hostname }}"
    logging:
      level: "info"
  configs:
    params:
      application.namespaces: "{{ argocd_namespaces | join(', ') }}"
      dexserver.disable.tls: true
      server.disable.auth: "{{ not (security_enabled | lower == 'true') }}"
      server.insecure: true
    cm:
      admin.enabled: "{{ not (security_enabled | lower == 'true') }}"
      exec.enabled: true
      users.anonymous.enabled: "{{ not (security_enabled | lower == 'true') }}"
      url: "https://automation-argo-cd.{{ ingress_hostname }}"
      resource.exclusions: |
        - apiGroups:
          - "velero.io"
          kinds:
          - "Backup"
          clusters:
          - "*"
      dex.config: |
        connectors:
          - type: oidc
            id: oidc
            name: IAM
            config:
              issuer: https://security-dex.{{ ingress_hostname }}/dex
              clientID: argo-cd
              clientSecret: $security_github_client_secret
      resource.customizations: |
        networking.k8s.io/Ingress:
          health.lua: |
            hs = {}
            
            if obj.status ~= nil then
              hs.status = "Healthy"
              hs.message = "Ingress created"
              return hs
            end

            hs.status = "Progressing"
            hs.message = "Waiting for creation"
            return hs
    cmp:
      create: true
      plugins:
        helmfile:
          allowConcurrency: true
          discover:
            fileName: "helmfile.yaml*"
          generate:
            command:
              - bash
              - /helmfile-scripts/argo-cd-helmfile.sh

          lockRepo: false
    rbac:
      policy.default: "role:admin"

    credentialTemplates: "{{argocd_credential_templates}}"

    secret:
      extra:
        security_github_client_id: "{{ security_github_client_id }}"
        security_github_client_secret: "{{ security_github_client_secret }}"
        security_github_organizations: "{{ security_github_organizations }}"
  applicationSet:
    metrics:
      enabled: "{{ enable_service_monitors }}"
      serviceMonitor:
        enabled: "{{ enable_service_monitors }}"
  controller:
    metrics:
      enabled: "{{ enable_service_monitors }}"
      serviceMonitor:
        enabled: "{{ enable_service_monitors }}"
  dex:
    enable: "{{ security_enabled }}"
    livenessProbe:
      enabled: true
    readinessProbe:
      enabled: true
    metrics:
      enabled: "{{ enable_service_monitors }}"
      serviceMonitor:
        enabled: "{{ enable_service_monitors }}"
  repoServer:
    clusterRoleRules:
      enabled: true
    metrics:
      enabled: "{{ enable_service_monitors }}"
      serviceMonitor:
        enabled: "{{ enable_service_monitors }}"
    extraContainers:
      - name: helmfile
        image: ghcr.io/helmfile/helmfile:v0.163.1
        command: ["/var/run/argocd/argocd-cmp-server"]
        env:
          - name: HELM_CACHE_HOME
            value: /tmp/helm/cache
          - name: HELM_CONFIG_HOME
            value: /tmp/helm/config
          - name: HELMFILE_CACHE_HOME
            value: /tmp/helmfile/cache
          - name: HELMFILE_TEMPDIR
            value: /tmp/helmfile/tmp
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
        volumeMounts:
          - mountPath: /var/run/argocd
            name: var-files
          - mountPath: /home/argocd/cmp-server/plugins
            name: plugins
          - mountPath: /home/argocd/cmp-server/config/plugin.yaml
            subPath: helmfile.yaml
            name: argocd-cmp-cm
          - mountPath: /tmp
            name: helmfile-tmp
          - name: helmfile-scripts
            mountPath: /helmfile-scripts/
          - name: helm-values
            mountPath: /helm-values/
    volumeMounts:
      - name: helm-values
        mountPath: /helm-values/
    volumes:
      - name: argocd-cmp-cm
        configMap:
          name: argocd-cmp-cm
      - name: helmfile-scripts
        configMap:
          name: argocd-helmfile
      - name: helmfile-tmp
        emptyDir: {}
      - name: helm-values
        secret:
          secretName: argocd-helm-values
          optional: true
  server:
    metrics:
      enabled: "{{ enable_service_monitors }}"
      serviceMonitor:
        enabled: "{{ enable_service_monitors }}"
    ingress:
      enabled: true
      ingressClassName: "nginx"
      hostname: "automation-argo-cd.{{ ingress_hostname }}"
      path: /
      tls: false

      annotations:
        gethomepage.dev/enabled: "true"
        gethomepage.dev/name: "Argo CD"
        gethomepage.dev/pod-selector: "app.kubernetes.io/name=argocd-server"
        gethomepage.dev/description: "Declarative Continuous Deployment for Kubernetes"
        gethomepage.dev/group: "Automation"
        gethomepage.dev/icon: "sh-argo-cd"
  extraObjects:
    - apiVersion: v1
      kind: Secret
      metadata:
        name: argocd-helm-values
      stringData: "{{ argocd_helm_secrets }}"
    - apiVersion: v1
      kind: ConfigMap
      metadata:
        name: argocd-helmfile
      data:
        argo-cd-helmfile.sh: |
          PARAMS=()                

          if [[ -v ARGOCD_APP_NAMESPACE ]]; then
            PARAMS+=(-n $ARGOCD_APP_NAMESPACE)
          fi

          if [[ -v ENV_NAME ]]; then
            PARAMS+=(-e $ENV_NAME)
          elif [[ -v ARGOCD_ENV_ENV_NAME ]]; then
            PARAMS+=(-e $ARGOCD_ENV_ENV_NAME)
          fi

          PARAMS+=(template --include-crds -q)

          if [[ -v ARGOCD_APP_NAMESPACE ]]; then
            PARAMS+=(-n $ARGOCD_APP_NAMESPACE)
          fi

          for f in $(ls /helm-values/); do
            PARAMS+=(--state-values-file /helm-values/$f)
          done

          LOG_FILE="/tmp/helmfile_${ARGOCD_APP_NAME}_$(date +'%Y%m%d%H%M').log"

          echo "##########################################" >> "$LOG_FILE"
          echo "Start helmfile for $ARGOCD_APP_NAME" >> "$LOG_FILE"
          echo "##########################################" >> "$LOG_FILE"

          helmfile "${PARAMS[@]}" | tee -a "$LOG_FILE"
          test "${PIPESTATUS[0]}" -eq 0

k8s_device_plugin_enabled: false
k8s_device_plugin_helm_values:
  runtimeClassName: nvidia
