---
# - name: Display all variables/facts known for a host
#   debug:
#     msg: "{{ security_dex_helm_values }}"
#   tags: debug_info

# - fail:

- name: K8s - Set context
  tags: always
  ansible.builtin.shell: |
    kubectl config use-context {{ k3s_context_name }}
  changed_when: true

- name: Include _version.yaml
  tags: always
  ansible.builtin.include_vars:
    file: defaults/_version.yaml

- name: Install Helm repositories
  tags: always
  kubernetes.core.helm_repository:
    name: "{{ item.value.ref.split('/')[0] }}"
    repo_url: "{{ item.value.repository }}"
    force_update: true
  with_items: "{{ helm_chart_version | dict2items }}"

- name: cert-manager
  block:
    - name: cert-manager - Install chart
      kubernetes.core.helm:
        name: cert-manager
        chart_ref: jetstack/cert-manager
        chart_version: "{{ helm_chart_version['cert-manager']['version'] }}"
        create_namespace: true
        force: "{{ helm_force_update }}"
        release_namespace: security
        values:
          ingressShim:
            defaultIssuerName: "cluster-issuer"
            defaultIssuerKind: "ClusterIssuer"

          installCRDs: true
        context: "{{ k3s_context_name }}"
    - name: cert-manager - Create resources
      kubernetes.core.k8s:
        namespace: security
        definition: "{{ lookup('ansible.builtin.template', 'cert_manager_resources.yaml.j2', template_vars = {}) | from_yaml_all }}"
        state: present
  tags: only-cert-manager

- name: external-dns
  block:
    - name: external-dns - Create DNS Secret
      kubernetes.core.k8s:
        namespace: kube-system
        definition: "{{ lookup('ansible.builtin.template', 'external_dns_secret.yaml.j2', template_vars = {}) | from_yaml_all }}"
        state: present
    - name: external-dns - Install chart
      kubernetes.core.helm:
        name: external-dns
        chart_ref: external-dns/external-dns
        chart_version: "{{ helm_chart_version['external-dns']['version'] }}"
        create_namespace: true
        force: "{{ helm_force_update }}"
        release_namespace: kube-system
        values: "{{ external_dns_helm_values }}"
        context: "{{ k3s_context_name }}"
  tags: only-external-dns

- name: kubernetes-reflector
  block:
    - name: kubernetes-reflector - Install chart
      kubernetes.core.helm:
        name: kubernetes-reflector
        chart_ref: emberstack/reflector
        chart_version: "{{ helm_chart_version['reflector']['version'] }}"
        create_namespace: true
        force: "{{ helm_force_update }}"
        release_namespace: kube-system
        values: "{{ kubernetes_reflector_helm_values }}"
        context: "{{ k3s_context_name }}"
  tags: only-kubernetes-reflector

- name: kubernetes-reloader
  tags: only-kubernetes-reloader
  block:
    - name: kubernetes-reloader - Install chart
      kubernetes.core.helm:
        name: kubernetes-reloader
        chart_ref: stakater/reloader
        chart_version: "{{ helm_chart_version['reloader']['version'] }}"
        create_namespace: true
        force: "{{ helm_force_update }}"
        release_namespace: kube-system
        values: "{{ kubernetes_reloader_helm_values }}"
        context: "{{ k3s_context_name }}"

- name: ingress-nginx
  block:
    - name: ingress-nginx - Install chart
      kubernetes.core.helm:
        name: ingress-nginx
        chart_ref: ingress-nginx/ingress-nginx
        chart_version: "{{ helm_chart_version['ingress-nginx']['version'] }}"
        create_namespace: true
        force: "{{ helm_force_update }}"
        release_namespace: kube-system
        values: "{{ ingress_nginx_helm_config }}"
        context: "{{ k3s_context_name }}"
    - ansible.builtin.wait_for:
        timeout: "120"
  tags: only-ingress-nginx

- name: security
  block:
    - name: Security - Authentication
      block:
        - name: Dex - Install chart
          kubernetes.core.helm:
            name: dex
            chart_ref: dex/dex
            chart_version: "{{ helm_chart_version['dex']['version'] }}"
            create_namespace: true
            force: "{{ helm_force_update }}"
            release_namespace: security
            values: "{{ security_dex_helm_values }}"
            context: "{{ k3s_context_name }}"
        - name: Oauth2 Proxy - Install chart
          kubernetes.core.helm:
            name: oauth2-proxy
            chart_ref: oauth2-proxy/oauth2-proxy
            chart_version: "{{ helm_chart_version['oauth2-proxy']['version'] }}"
            create_namespace: true
            force: "{{ helm_force_update }}"
            release_namespace: security
            values: "{{ security_oauth2_proxy_helm_values }}"
            context: "{{ k3s_context_name }}"
  tags: only-security
  when: "security_enabled"

- name: longhorn
  block:
    - name: Longhorn - Tag create-default-disk in agent nodes
      ansible.builtin.shell: |
        kubectl annotate node {{ item }} 'node.longhorn.io/default-disks-config=[{"path":"{{hostvars[item].longhorn_data_dir | default(longhorn_data_dir)}}", "allowScheduling":true}]' --overwrite
        sleep 5
        kubectl label node {{ item }} 'node.longhorn.io/create-default-disk=config' --overwrite
      when: "hostvars[item].k3s_agent_longhorn_enabled"
      with_items: "{{ groups['agent'] }}"
    - name: Longhorn - Install chart
      kubernetes.core.helm:
        name: longhorn
        chart_ref: longhorn/longhorn
        chart_version: "{{ helm_chart_version['longhorn']['version'] }}"
        create_namespace: true
        force: "{{ helm_force_update }}"
        release_namespace: kube-system
        values: "{{ longhorn_helm_values }}"
        context: "{{ k3s_context_name }}"
    - name: Longhorn - Tag agent nodes
      ansible.builtin.shell: |
        kubectl patch node.longhorn.io {{ item }} --type=json -p='[{"op": "replace", "path": "/spec/tags", "value":["AGENT_NODE"]}]' -n kube-system
      retries: 10
      delay: 30
      register: result
      until: result.rc == 0
      when: "hostvars[item].k3s_agent_longhorn_enabled"
      with_items: "{{ groups['agent'] }}"
    - name: Longhorn - Install Snapshot Controller chart
      kubernetes.core.helm:
        name: snapshot-controller
        chart_ref: piraeus-charts/snapshot-controller
        chart_version: "{{ helm_chart_version['snapshot-controller']['version'] }}"
        create_namespace: true
        force: "{{ helm_force_update }}"
        release_namespace: kube-system
        values: "{{ snapshot_controller }}"
        context: "{{ k3s_context_name }}"
  tags: only-longhorn
  when: "longhorn_enabled"

- name: nfs-external-provisioner
  block:
    - name: NFS Subdir External Provisioner - Install chart
      kubernetes.core.helm:
        name: nfs-subdir-external-provisioner
        chart_ref: nfs-subdir-external-provisioner/nfs-subdir-external-provisioner
        chart_version: "{{ helm_chart_version['nfs-subdir-external-provisioner']['version'] }}"
        create_namespace: true
        force: "{{ helm_force_update }}"
        release_namespace: kube-system
        values: "{{ nfs_external_provisioner_helm_values }}"
        context: "{{ k3s_context_name }}"
  tags: only-nfs-subdir-external-provisioner
  when: "nfs_external_provisioner_enabled"

- name: argocd
  block:
    - name: ArgoCD - Install chart
      kubernetes.core.helm:
        name: argo-cd
        chart_ref: argo/argo-cd
        chart_version: "{{ helm_chart_version['argo-cd']['version'] }}"
        create_namespace: true
        force: "{{ helm_force_update }}"
        release_namespace: automation
        values: "{{ argocd_helm_values }}"
        context: "{{ k3s_context_name }}"
    - name: ArgoCD - Rollout server
      ansible.builtin.shell: |
        sleep 15 && kubectl rollout restart -n automation deploy/argo-cd-argocd-server || true
    - name: ArgoCD - Create Projects
      kubernetes.core.k8s:
        state: present
        namespace: automation
        definition: "{{ lookup('ansible.builtin.template', 'argocd_project.yaml.j2', template_vars = {'namespace': item}) | from_yaml_all }}"
      with_items: "{{ argocd_namespaces }}"
  tags: only-argocd
  when: "argocd_enabled"

- name: nvidia-k8s-device-plugin
  block:
    - name: NVIDIA k8s Device Plugin - Install chart
      kubernetes.core.helm:
        name: nvidia-device-plugin
        chart_ref: nvidia-k8s-device-plugin/nvidia-device-plugin
        chart_version: "{{ helm_chart_version['nvidia-device-plugin']['version'] }}"
        create_namespace: true
        force: "{{ helm_force_update }}"
        release_namespace: kube-system
        values: "{{ k8s_device_plugin_helm_values }}"
        context: "{{ k3s_context_name }}"
  tags: only-nvidia-k8s-device-plugin
  when: "k8s_device_plugin_enabled"
